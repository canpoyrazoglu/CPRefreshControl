//
//  CPRefreshControl.h
//  CPRefreshControl
//
//  Created by Can Poyrazoğlu on 24.08.2017.
//  Copyright © 2017 Can Poyrazoğlu. All rights reserved.
//

#import <UIKit/UIKit.h>

typedef void (^CPRefreshControlAction)(void);

/// Represents a haptic impact feedback style.
typedef enum{
    CPRefreshControlImpactStyleLight,
    CPRefreshControlImpactStyleMedium,
    CPRefreshControlImpactStyleHeavy,
    CPRefreshControlImpactStyleNone
} CPRefreshControlImpactStyle;

IB_DESIGNABLE
@interface CPRefreshControl : UIView

/// Color of each tick. Default is gray.
@property(nonatomic) IBInspectable UIColor *color;

/// Number of ticks visible in the refresh control. Default is @c 12.
@property(nonatomic) IBInspectable int tickCount;

/// Speed of the animation (not in any particular unit). Default is @c 5.2. Experiment with this value to see its effect.
@property IBInspectable float animationSpeed;

/// Value of the control. 0 means not pulled at all (hidden), and 1 means fully visible to start animating. Set this to 1 calls @c beginAnimating, and any value changes will be ignored until @c endAnimating is called.
@property(nonatomic) IBInspectable float value;

/// Width of a single tick. Default is 1.85.
@property(nonatomic) IBInspectable float tickWidth;

/// Length multiplier of the ticks. 0 means no length (hidden), 1 means full circle (from circle to edge). Default is 0.45.
@property(nonatomic) IBInspectable float tickLength;

/// Begins animating the control. Call @c endAnimating to stop animation. Any value changes while animating will be ignored.
-(void)beginAnimating;

/// Ends animating the control.
/// @note Ending the animation will automatically set @c value to @c 0.
-(void)endAnimating;

/// Whether the control is currently animating or not.
@property(nonatomic, readonly) BOOL isAnimating;

/// Determines whether the animation should end immediately or with a smooth scale down animation
@property IBInspectable BOOL shouldSkipEndingAnimation;

/// Determines whether the control should perform the rotation animation smoothly (continuous rotation) instead of the default "stop motion" rotation behavior.
@property IBInspectable BOOL shouldAnimateSmoothly;

/// The alpha multiplier applied to each tick's color (based on previous tick's color) when animating. Default is 0.88, meaning each consequent tick's alpha is multiplied by 0.88 of previous tick when animating. Set to 1 to disable color fade effect on consequent ticks.
@property IBInspectable float animatingTickAlphaBias;

/// Style of the impact generated by beginning a refresh. Default is light impact, which creates a subtle haptic feedback on refresh.
/// @note This value will be ignored on platforms prior to iOS 10.
@property(nonatomic) IBInspectable CPRefreshControlImpactStyle impactStyle;

/// Amount of scaling animation to apply briefly at the beginning of a refresh. The view will be animated to the specified value and back quickly. The default is @c 1.25, meaning that the view will get 25% larger than it's default size, and then revert back to its original size.
@property IBInspectable float discreteAnimationBeginningScaleAmount;

@end
